#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    May 09, 2020 12:02:23 PM +06  platform: Windows NT

import sys,os,subprocess,time,threading, traceback
from tkinter import messagebox
import MMCL_monitoring_9_May_2020
from openpyxl.styles import PatternFill, Border, Side, Alignment, Font, Color
from openpyxl import Workbook,load_workbook
from openpyxl.utils import get_column_letter

from console_out.console_out_gui_file import printCon
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
try:
    import ping_setting.ping_setting_support
    from ping_setting.ping_setting_support import *
except:
    pass

global ping_setting_window_control
ping_setting_window_control = False
print(f"value cng here: {ping_setting_window_control}")

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    set_Tk_var()
    top = Toplevel1 (root)
    init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global ping_setting_window_control
    if ping_setting_window_control:
        print(f"resist to open new window, value = {ping_setting_window_control}")
        return None
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    set_Tk_var()
    top = Toplevel1 (w)
    init(w, top, *args, **kwargs)
    w.protocol("WM_DELETE_WINDOW", ping_setting.ping_set.destroy_Toplevel1)
    ping_setting_window_control = True
    Toplevel1.configure_gui()
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
    global ping_setting_window_control
    ping_setting_window_control = False

class Toplevel1:

    def __init__(self, top=None):
        global title_entry_list,ip_entry_list,ip_serial_number, checkbox_status
        title_entry_list = []
        ip_entry_list = []
        ip_serial_number = []
        checkbox_status = []
        global next_previous_page,workbook_dataBase, worksheet_ping
        next_previous_page = 0

        try:
            workbook_dataBase = load_workbook("workbook_dataBase.xlsx")
        except:
            exc_type, exc_value, exc_traceback = sys.exc_info()
            traceback.print_exception(exc_type, exc_value, exc_traceback)
            exc = traceback.format_exception(exc_type, exc_value, exc_traceback)
            [printCon(i, color='red') for i in exc]
            workbook_dataBase = Workbook()
            print(f"Exception in loading excel. workbook_dataBase.xlsx File not found..")

        print(workbook_dataBase.sheetnames)
        if "worksheet_ping" not in workbook_dataBase.sheetnames:
            workbook_dataBase.create_sheet("worksheet_ping")
            print("new sheet created..............................info")
        worksheet_ping = workbook_dataBase["worksheet_ping"]
        print(f"worksheet_ping = workbook_dataBase['worksheet_ping'] created")

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("635x567+407+60")
        top.title("Ping Setting")
        top.configure(background="#d9d9d9")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.016, rely=0.018, relheight=0.961
                , relwidth=0.969)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(width=615)

        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=0.016, rely=0.018, relheight=0.083
                , relwidth=0.967)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(width=595)

        self.Label1 = tk.Label(self.Frame2)
        self.Label1.place(relx=0.017, rely=0.222, height=31, width=574)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''IP and Title Setting''')
        self.Label1.configure(width=574)

        self.Frame3 = tk.Frame(self.Frame1)
        self.Frame3.place(relx=0.016, rely=0.11, relheight=0.872, relwidth=0.967)

        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(width=595)

        self.Frame4 = tk.Frame(self.Frame3)
        self.Frame4.place(relx=0.017, rely=0.021, relheight=0.074
                , relwidth=0.966)
        self.Frame4.configure(relief='groove')
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief="groove")
        self.Frame4.configure(background="#d9d9d9")
        self.Frame4.configure(width=575)

        self.Label2 = tk.Label(self.Frame4)
        self.Label2.place(relx=0.087, rely=0.0, height=31, width=178)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 13")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Title''')
        self.Label2.configure(width=178)

        self.Label2_1 = tk.Label(self.Frame4)
        self.Label2_1.place(relx=0.417, rely=0.0, height=31, width=218)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Segoe UI} -size 13")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''IP Address''')
        self.Label2_1.configure(width=218)

        self.Label2_2 = tk.Label(self.Frame4)
        self.Label2_2.place(relx=0.817, rely=0.0, height=31, width=98)
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(activeforeground="black")
        self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(font="-family {Segoe UI} -size 13")
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#d9d9d9")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text='''Status''')
        self.Label2_2.configure(width=98)

        self.Label2_8 = tk.Label(self.Frame4)
        # ip_serial_number.append(self.Label2_8)
        self.Label2_8.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(font="-family {Segoe UI} -size 13")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''No.''')
        self.Label2_8.configure(width=28)

        self.Frame6 = tk.Frame(self.Frame3)
        self.Frame6.place(relx=0.017, rely=0.779, relheight=0.2, relwidth=0.966)
        self.Frame6.configure(relief='groove')
        self.Frame6.configure(borderwidth="2")
        self.Frame6.configure(relief="groove")
        self.Frame6.configure(background="#d9d9d9")
        self.Frame6.configure(width=575)

        self.Button1 = tk.Button(self.Frame6)
        self.Button1.place(relx=0.017, rely=0.105, height=34, width=157)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 13")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Previous Page''')
        self.Button1.configure(width=157)
        self.Button1.configure(command=Toplevel1.previous_page)

        self.Button1_9 = tk.Button(self.Frame6)
        self.Button1_9.place(relx=0.33, rely=0.105, height=34, width=197)
        self.Button1_9.configure(activebackground="#ececec")
        self.Button1_9.configure(activeforeground="#000000")
        self.Button1_9.configure(background="#d9d9d9")
        self.Button1_9.configure(disabledforeground="#a3a3a3")
        self.Button1_9.configure(font="-family {Segoe UI} -size 13")
        self.Button1_9.configure(foreground="#000000")
        self.Button1_9.configure(highlightbackground="#d9d9d9")
        self.Button1_9.configure(highlightcolor="black")
        self.Button1_9.configure(pady="0")
        self.Button1_9.configure(text='''Start Ping''')
        self.Button1_9.configure(width=197)
        self.Button1_9.configure(command=Toplevel1.cmd)


        self.Button1_10 = tk.Button(self.Frame6)
        self.Button1_10.place(relx=0.713, rely=0.105, height=34, width=157)
        self.Button1_10.configure(activebackground="#ececec")
        self.Button1_10.configure(activeforeground="#000000")
        self.Button1_10.configure(background="#d9d9d9")
        self.Button1_10.configure(disabledforeground="#a3a3a3")
        self.Button1_10.configure(font="-family {Segoe UI} -size 13")
        self.Button1_10.configure(foreground="#000000")
        self.Button1_10.configure(highlightbackground="#d9d9d9")
        self.Button1_10.configure(highlightcolor="black")
        self.Button1_10.configure(pady="0")
        self.Button1_10.configure(text='''Next Page''')
        self.Button1_10.configure(width=157)
        self.Button1_10.configure(command=Toplevel1.next_page)

        self.Button1_11 = tk.Button(self.Frame6)
        self.Button1_11.place(relx=0.017, rely=0.526, height=34, width=267)
        self.Button1_11.configure(activebackground="#ececec")
        self.Button1_11.configure(activeforeground="#000000")
        self.Button1_11.configure(background="#d9d9d9")
        self.Button1_11.configure(disabledforeground="#a3a3a3")
        self.Button1_11.configure(font="-family {Segoe UI} -size 13")
        self.Button1_11.configure(foreground="#000000")
        self.Button1_11.configure(highlightbackground="#d9d9d9")
        self.Button1_11.configure(highlightcolor="black")
        self.Button1_11.configure(pady="0")
        self.Button1_11.configure(text='''Save''')
        self.Button1_11.configure(width=267)
        self.Button1_11.configure(command=Toplevel1.save_setting)

        self.Button1_12 = tk.Button(self.Frame6)
        self.Button1_12.place(relx=0.504, rely=0.526, height=34, width=277)
        self.Button1_12.configure(activebackground="#ececec")
        self.Button1_12.configure(activeforeground="#000000")
        self.Button1_12.configure(background="#d9d9d9")
        self.Button1_12.configure(disabledforeground="#a3a3a3")
        self.Button1_12.configure(font="-family {Segoe UI} -size 13")
        self.Button1_12.configure(foreground="#000000")
        self.Button1_12.configure(highlightbackground="#d9d9d9")
        self.Button1_12.configure(highlightcolor="black")
        self.Button1_12.configure(pady="0")
        self.Button1_12.configure(text='''Exit''')
        self.Button1_12.configure(width=277)
        self.Button1_12.configure(command=ping_setting.ping_set.destroy_Toplevel1)

        self.Frame5_9 = tk.Frame(self.Frame3)
        self.Frame5_9.place(relx=0.017, rely=0.695, relheight=0.074
                , relwidth=0.966)
        self.Frame5_9.configure(relief='groove')
        self.Frame5_9.configure(borderwidth="2")
        self.Frame5_9.configure(relief="groove")
        self.Frame5_9.configure(background="#d9d9d9")
        self.Frame5_9.configure(highlightbackground="#d9d9d9")
        self.Frame5_9.configure(highlightcolor="black")
        self.Frame5_9.configure(width=575)

        self.Entry1_10 = tk.Entry(self.Frame5_9)
        title_entry_list.append(self.Entry1_10)
        self.Entry1_10.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_10.configure(background="white")
        self.Entry1_10.configure(disabledforeground="#a3a3a3")
        self.Entry1_10.configure(font="-family {Courier New} -size 13")
        self.Entry1_10.configure(foreground="#000000")
        self.Entry1_10.configure(highlightbackground="#d9d9d9")
        self.Entry1_10.configure(highlightcolor="black")
        self.Entry1_10.configure(insertbackground="black")
        self.Entry1_10.configure(selectbackground="#c4c4c4")
        self.Entry1_10.configure(selectforeground="black")
        self.Entry1_10.configure(takefocus="Hello")
        self.Entry1_10.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_5 = tk.Entry(self.Frame5_9)
        ip_entry_list.append(self.Entry1_5)
        self.Entry1_5.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_5.configure(background="white")
        self.Entry1_5.configure(disabledforeground="#a3a3a3")
        self.Entry1_5.configure(font="-family {Courier New} -size 13")
        self.Entry1_5.configure(foreground="#000000")
        self.Entry1_5.configure(highlightbackground="#d9d9d9")
        self.Entry1_5.configure(highlightcolor="black")
        self.Entry1_5.configure(insertbackground="black")
        self.Entry1_5.configure(selectbackground="#c4c4c4")
        self.Entry1_5.configure(selectforeground="black")
        self.Entry1_5.configure(textvariable=ping_setting.ping_setting_support.ip_address)

        self.Checkbutton1_6 = tk.Checkbutton(self.Frame5_9)
        checkbox_status.append(self.Checkbutton1_6)
        self.Checkbutton1_6.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_6.configure(activebackground="#ececec")
        self.Checkbutton1_6.configure(activeforeground="#000000")
        self.Checkbutton1_6.configure(background="#d9d9d9")
        self.Checkbutton1_6.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_6.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_6.configure(foreground="#000000")
        self.Checkbutton1_6.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_6.configure(highlightcolor="black")
        self.Checkbutton1_6.configure(justify='left')
        self.Checkbutton1_6.configure(text='''Active''')
        # self.Checkbutton1_6.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_8 = tk.Label(self.Frame5_9)
        ip_serial_number.append(self.Label2_8)
        self.Label2_8.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(font="-family {Segoe UI} -size 13")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''No.''')
        self.Label2_8.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_8.configure(width=28)

        self.Frame5_9 = tk.Frame(self.Frame3)
        self.Frame5_9.place(relx=0.017, rely=0.189, relheight=0.074
                , relwidth=0.966)
        self.Frame5_9.configure(relief='groove')
        self.Frame5_9.configure(borderwidth="2")
        self.Frame5_9.configure(relief="groove")
        self.Frame5_9.configure(background="#d9d9d9")
        self.Frame5_9.configure(highlightbackground="#d9d9d9")
        self.Frame5_9.configure(highlightcolor="black")
        self.Frame5_9.configure(width=575)

        self.Entry1_10 = tk.Entry(self.Frame5_9)
        title_entry_list.append(self.Entry1_10)
        self.Entry1_10.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_10.configure(background="white")
        self.Entry1_10.configure(disabledforeground="#a3a3a3")
        self.Entry1_10.configure(font="-family {Courier New} -size 13")
        self.Entry1_10.configure(foreground="#000000")
        self.Entry1_10.configure(highlightbackground="#d9d9d9")
        self.Entry1_10.configure(highlightcolor="black")
        self.Entry1_10.configure(insertbackground="black")
        self.Entry1_10.configure(selectbackground="#c4c4c4")
        self.Entry1_10.configure(selectforeground="black")
        self.Entry1_10.configure(takefocus="Hello")
        self.Entry1_10.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_5 = tk.Entry(self.Frame5_9)
        ip_entry_list.append(self.Entry1_5)
        self.Entry1_5.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_5.configure(background="white")
        self.Entry1_5.configure(disabledforeground="#a3a3a3")
        self.Entry1_5.configure(font="-family {Courier New} -size 13")
        self.Entry1_5.configure(foreground="#000000")
        self.Entry1_5.configure(highlightbackground="#d9d9d9")
        self.Entry1_5.configure(highlightcolor="black")
        self.Entry1_5.configure(insertbackground="black")
        self.Entry1_5.configure(selectbackground="#c4c4c4")
        self.Entry1_5.configure(selectforeground="black")
        self.Entry1_5.configure(textvariable=ping_setting.ping_setting_support.ip_address)
        #ping_set.ping_setting_support
        self.Checkbutton1_6 = tk.Checkbutton(self.Frame5_9)
        checkbox_status.append(self.Checkbutton1_6)
        self.Checkbutton1_6.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_6.configure(activebackground="#ececec")
        self.Checkbutton1_6.configure(activeforeground="#000000")
        self.Checkbutton1_6.configure(background="#d9d9d9")
        self.Checkbutton1_6.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_6.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_6.configure(foreground="#000000")
        self.Checkbutton1_6.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_6.configure(highlightcolor="black")
        self.Checkbutton1_6.configure(justify='left')
        self.Checkbutton1_6.configure(text='''Active''')
        # self.Checkbutton1_6.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_8 = tk.Label(self.Frame5_9)
        ip_serial_number.append(self.Label2_8)
        self.Label2_8.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(font="-family {Segoe UI} -size 13")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''No.''')
        self.Label2_8.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_8.configure(width=28)

        self.Frame5_10 = tk.Frame(self.Frame3)
        self.Frame5_10.place(relx=0.017, rely=0.274, relheight=0.074
                , relwidth=0.966)
        self.Frame5_10.configure(relief='groove')
        self.Frame5_10.configure(borderwidth="2")
        self.Frame5_10.configure(relief="groove")
        self.Frame5_10.configure(background="#d9d9d9")
        self.Frame5_10.configure(highlightbackground="#d9d9d9")
        self.Frame5_10.configure(highlightcolor="black")
        self.Frame5_10.configure(width=575)

        self.Entry1_11 = tk.Entry(self.Frame5_10)
        title_entry_list.append(self.Entry1_11)
        self.Entry1_11.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_11.configure(background="white")
        self.Entry1_11.configure(disabledforeground="#a3a3a3")
        self.Entry1_11.configure(font="-family {Courier New} -size 13")
        self.Entry1_11.configure(foreground="#000000")
        self.Entry1_11.configure(highlightbackground="#d9d9d9")
        self.Entry1_11.configure(highlightcolor="black")
        self.Entry1_11.configure(insertbackground="black")
        self.Entry1_11.configure(selectbackground="#c4c4c4")
        self.Entry1_11.configure(selectforeground="black")
        self.Entry1_11.configure(takefocus="Hello")
        self.Entry1_11.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_6 = tk.Entry(self.Frame5_10)
        ip_entry_list.append(self.Entry1_6)
        self.Entry1_6.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(disabledforeground="#a3a3a3")
        self.Entry1_6.configure(font="-family {Courier New} -size 13")
        self.Entry1_6.configure(foreground="#000000")
        self.Entry1_6.configure(highlightbackground="#d9d9d9")
        self.Entry1_6.configure(highlightcolor="black")
        self.Entry1_6.configure(insertbackground="black")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(selectforeground="black")
        self.Entry1_6.configure(textvariable=ping_setting.ping_setting_support.ip_address)

        self.Checkbutton1_7 = tk.Checkbutton(self.Frame5_10)
        checkbox_status.append(self.Checkbutton1_7)
        self.Checkbutton1_7.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_7.configure(activebackground="#ececec")
        self.Checkbutton1_7.configure(activeforeground="#000000")
        self.Checkbutton1_7.configure(background="#d9d9d9")
        self.Checkbutton1_7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_7.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_7.configure(foreground="#000000")
        self.Checkbutton1_7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_7.configure(highlightcolor="black")
        self.Checkbutton1_7.configure(justify='left')
        self.Checkbutton1_7.configure(text='''Active''')
        # self.Checkbutton1_7.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_9 = tk.Label(self.Frame5_10)
        ip_serial_number.append(self.Label2_9)
        self.Label2_9.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(font="-family {Segoe UI} -size 13")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''No.''')
        self.Label2_9.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_9.configure(width=28)

        self.Frame5_10 = tk.Frame(self.Frame3)
        self.Frame5_10.place(relx=0.017, rely=0.358, relheight=0.074
                , relwidth=0.966)
        self.Frame5_10.configure(relief='groove')
        self.Frame5_10.configure(borderwidth="2")
        self.Frame5_10.configure(relief="groove")
        self.Frame5_10.configure(background="#d9d9d9")
        self.Frame5_10.configure(highlightbackground="#d9d9d9")
        self.Frame5_10.configure(highlightcolor="black")
        self.Frame5_10.configure(width=575)

        self.Entry1_11 = tk.Entry(self.Frame5_10)
        title_entry_list.append(self.Entry1_11)
        self.Entry1_11.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_11.configure(background="white")
        self.Entry1_11.configure(disabledforeground="#a3a3a3")
        self.Entry1_11.configure(font="-family {Courier New} -size 13")
        self.Entry1_11.configure(foreground="#000000")
        self.Entry1_11.configure(highlightbackground="#d9d9d9")
        self.Entry1_11.configure(highlightcolor="black")
        self.Entry1_11.configure(insertbackground="black")
        self.Entry1_11.configure(selectbackground="#c4c4c4")
        self.Entry1_11.configure(selectforeground="black")
        self.Entry1_11.configure(takefocus="Hello")
        self.Entry1_11.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_6 = tk.Entry(self.Frame5_10)
        ip_entry_list.append(self.Entry1_6)
        self.Entry1_6.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(disabledforeground="#a3a3a3")
        self.Entry1_6.configure(font="-family {Courier New} -size 13")
        self.Entry1_6.configure(foreground="#000000")
        self.Entry1_6.configure(highlightbackground="#d9d9d9")
        self.Entry1_6.configure(highlightcolor="black")
        self.Entry1_6.configure(insertbackground="black")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(selectforeground="black")
        self.Entry1_6.configure(textvariable=ping_setting.ping_setting_support.ip_address)

        self.Checkbutton1_7 = tk.Checkbutton(self.Frame5_10)
        checkbox_status.append(self.Checkbutton1_7)
        self.Checkbutton1_7.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_7.configure(activebackground="#ececec")
        self.Checkbutton1_7.configure(activeforeground="#000000")
        self.Checkbutton1_7.configure(background="#d9d9d9")
        self.Checkbutton1_7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_7.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_7.configure(foreground="#000000")
        self.Checkbutton1_7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_7.configure(highlightcolor="black")
        self.Checkbutton1_7.configure(justify='left')
        self.Checkbutton1_7.configure(text='''Active''')
        # self.Checkbutton1_7.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_9 = tk.Label(self.Frame5_10)
        ip_serial_number.append(self.Label2_9)
        self.Label2_9.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(font="-family {Segoe UI} -size 13")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''No.''')
        self.Label2_9.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_9.configure(width=28)

        self.Frame5_10 = tk.Frame(self.Frame3)
        self.Frame5_10.place(relx=0.017, rely=0.442, relheight=0.074
                , relwidth=0.966)
        self.Frame5_10.configure(relief='groove')
        self.Frame5_10.configure(borderwidth="2")
        self.Frame5_10.configure(relief="groove")
        self.Frame5_10.configure(background="#d9d9d9")
        self.Frame5_10.configure(highlightbackground="#d9d9d9")
        self.Frame5_10.configure(highlightcolor="black")
        self.Frame5_10.configure(width=575)

        self.Entry1_11 = tk.Entry(self.Frame5_10)
        title_entry_list.append(self.Entry1_11)
        self.Entry1_11.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_11.configure(background="white")
        self.Entry1_11.configure(disabledforeground="#a3a3a3")
        self.Entry1_11.configure(font="-family {Courier New} -size 13")
        self.Entry1_11.configure(foreground="#000000")
        self.Entry1_11.configure(highlightbackground="#d9d9d9")
        self.Entry1_11.configure(highlightcolor="black")
        self.Entry1_11.configure(insertbackground="black")
        self.Entry1_11.configure(selectbackground="#c4c4c4")
        self.Entry1_11.configure(selectforeground="black")
        self.Entry1_11.configure(takefocus="Hello")
        self.Entry1_11.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_6 = tk.Entry(self.Frame5_10)
        ip_entry_list.append(self.Entry1_6)
        self.Entry1_6.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(disabledforeground="#a3a3a3")
        self.Entry1_6.configure(font="-family {Courier New} -size 13")
        self.Entry1_6.configure(foreground="#000000")
        self.Entry1_6.configure(highlightbackground="#d9d9d9")
        self.Entry1_6.configure(highlightcolor="black")
        self.Entry1_6.configure(insertbackground="black")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(selectforeground="black")
        self.Entry1_6.configure(textvariable=ping_setting.ping_setting_support.ip_address)

        self.Checkbutton1_7 = tk.Checkbutton(self.Frame5_10)
        checkbox_status.append(self.Checkbutton1_7)
        self.Checkbutton1_7.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_7.configure(activebackground="#ececec")
        self.Checkbutton1_7.configure(activeforeground="#000000")
        self.Checkbutton1_7.configure(background="#d9d9d9")
        self.Checkbutton1_7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_7.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_7.configure(foreground="#000000")
        self.Checkbutton1_7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_7.configure(highlightcolor="black")
        self.Checkbutton1_7.configure(justify='left')
        self.Checkbutton1_7.configure(text='''Active''')
        # self.Checkbutton1_7.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_9 = tk.Label(self.Frame5_10)
        ip_serial_number.append(self.Label2_9)
        self.Label2_9.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(font="-family {Segoe UI} -size 13")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''No.''')
        self.Label2_9.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_9.configure(width=28)

        self.Frame5_10 = tk.Frame(self.Frame3)
        self.Frame5_10.place(relx=0.017, rely=0.526, relheight=0.074
                , relwidth=0.966)
        self.Frame5_10.configure(relief='groove')
        self.Frame5_10.configure(borderwidth="2")
        self.Frame5_10.configure(relief="groove")
        self.Frame5_10.configure(background="#d9d9d9")
        self.Frame5_10.configure(highlightbackground="#d9d9d9")
        self.Frame5_10.configure(highlightcolor="black")
        self.Frame5_10.configure(width=575)

        self.Entry1_11 = tk.Entry(self.Frame5_10)
        title_entry_list.append(self.Entry1_11)
        self.Entry1_11.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_11.configure(background="white")
        self.Entry1_11.configure(disabledforeground="#a3a3a3")
        self.Entry1_11.configure(font="-family {Courier New} -size 13")
        self.Entry1_11.configure(foreground="#000000")
        self.Entry1_11.configure(highlightbackground="#d9d9d9")
        self.Entry1_11.configure(highlightcolor="black")
        self.Entry1_11.configure(insertbackground="black")
        self.Entry1_11.configure(selectbackground="#c4c4c4")
        self.Entry1_11.configure(selectforeground="black")
        self.Entry1_11.configure(takefocus="Hello")
        self.Entry1_11.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_6 = tk.Entry(self.Frame5_10)
        ip_entry_list.append(self.Entry1_6)
        self.Entry1_6.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(disabledforeground="#a3a3a3")
        self.Entry1_6.configure(font="-family {Courier New} -size 13")
        self.Entry1_6.configure(foreground="#000000")
        self.Entry1_6.configure(highlightbackground="#d9d9d9")
        self.Entry1_6.configure(highlightcolor="black")
        self.Entry1_6.configure(insertbackground="black")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(selectforeground="black")
        self.Entry1_6.configure(textvariable=ping_setting.ping_setting_support.ip_address)

        self.Checkbutton1_7 = tk.Checkbutton(self.Frame5_10)
        checkbox_status.append(self.Checkbutton1_7)
        self.Checkbutton1_7.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_7.configure(activebackground="#ececec")
        self.Checkbutton1_7.configure(activeforeground="#000000")
        self.Checkbutton1_7.configure(background="#d9d9d9")
        self.Checkbutton1_7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_7.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_7.configure(foreground="#000000")
        self.Checkbutton1_7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_7.configure(highlightcolor="black")
        self.Checkbutton1_7.configure(justify='left')
        self.Checkbutton1_7.configure(text='''Active''')
        # self.Checkbutton1_7.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_9 = tk.Label(self.Frame5_10)
        ip_serial_number.append(self.Label2_9)
        self.Label2_9.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(font="-family {Segoe UI} -size 13")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''No.''')
        self.Label2_9.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_9.configure(width=28)

        self.Frame5_10 = tk.Frame(self.Frame3)
        self.Frame5_10.place(relx=0.017, rely=0.611, relheight=0.074
                , relwidth=0.966)
        self.Frame5_10.configure(relief='groove')
        self.Frame5_10.configure(borderwidth="2")
        self.Frame5_10.configure(relief="groove")
        self.Frame5_10.configure(background="#d9d9d9")
        self.Frame5_10.configure(highlightbackground="#d9d9d9")
        self.Frame5_10.configure(highlightcolor="black")
        self.Frame5_10.configure(width=575)

        self.Entry1_11 = tk.Entry(self.Frame5_10)
        title_entry_list.append(self.Entry1_11)
        self.Entry1_11.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_11.configure(background="white")
        self.Entry1_11.configure(disabledforeground="#a3a3a3")
        self.Entry1_11.configure(font="-family {Courier New} -size 13")
        self.Entry1_11.configure(foreground="#000000")
        self.Entry1_11.configure(highlightbackground="#d9d9d9")
        self.Entry1_11.configure(highlightcolor="black")
        self.Entry1_11.configure(insertbackground="black")
        self.Entry1_11.configure(selectbackground="#c4c4c4")
        self.Entry1_11.configure(selectforeground="black")
        self.Entry1_11.configure(takefocus="Hello")
        self.Entry1_11.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_6 = tk.Entry(self.Frame5_10)
        ip_entry_list.append(self.Entry1_6)
        self.Entry1_6.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(disabledforeground="#a3a3a3")
        self.Entry1_6.configure(font="-family {Courier New} -size 13")
        self.Entry1_6.configure(foreground="#000000")
        self.Entry1_6.configure(highlightbackground="#d9d9d9")
        self.Entry1_6.configure(highlightcolor="black")
        self.Entry1_6.configure(insertbackground="black")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(selectforeground="black")
        self.Entry1_6.configure(textvariable=ping_setting.ping_setting_support.ip_address)

        self.Checkbutton1_7 = tk.Checkbutton(self.Frame5_10)
        checkbox_status.append(self.Checkbutton1_7)
        self.Checkbutton1_7.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_7.configure(activebackground="#ececec")
        self.Checkbutton1_7.configure(activeforeground="#000000")
        self.Checkbutton1_7.configure(background="#d9d9d9")
        self.Checkbutton1_7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_7.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_7.configure(foreground="#000000")
        self.Checkbutton1_7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_7.configure(highlightcolor="black")
        self.Checkbutton1_7.configure(justify='left')
        self.Checkbutton1_7.configure(text='''Active''')
        # self.Checkbutton1_7.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_9 = tk.Label(self.Frame5_10)
        ip_serial_number.append(self.Label2_9)
        self.Label2_9.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(font="-family {Segoe UI} -size 13")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''No.''')
        self.Label2_9.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_9.configure(width=28)

        self.Frame5_10 = tk.Frame(self.Frame3)
        self.Frame5_10.place(relx=0.017, rely=0.105, relheight=0.074
                , relwidth=0.966)
        self.Frame5_10.configure(relief='groove')
        self.Frame5_10.configure(borderwidth="2")
        self.Frame5_10.configure(relief="groove")
        self.Frame5_10.configure(background="#d9d9d9")
        self.Frame5_10.configure(highlightbackground="#d9d9d9")
        self.Frame5_10.configure(highlightcolor="black")
        self.Frame5_10.configure(width=575)

        self.Entry1_11 = tk.Entry(self.Frame5_10)
        title_entry_list.append(self.Entry1_11)
        self.Entry1_11.place(relx=0.07, rely=0.0,height=31, relwidth=0.32)
        self.Entry1_11.configure(background="white")
        self.Entry1_11.configure(disabledforeground="#a3a3a3")
        self.Entry1_11.configure(font="-family {Courier New} -size 13")
        self.Entry1_11.configure(foreground="#000000")
        self.Entry1_11.configure(highlightbackground="#d9d9d9")
        self.Entry1_11.configure(highlightcolor="black")
        self.Entry1_11.configure(insertbackground="black")
        self.Entry1_11.configure(selectbackground="#c4c4c4")
        self.Entry1_11.configure(selectforeground="black")
        self.Entry1_11.configure(takefocus="Hello")
        self.Entry1_11.configure(textvariable=ping_setting.ping_setting_support.Ping_title)

        self.Entry1_6 = tk.Entry(self.Frame5_10)
        ip_entry_list.append(self.Entry1_6)
        self.Entry1_6.place(relx=0.409, rely=0.0,height=31, relwidth=0.39)
        self.Entry1_6.configure(background="white")
        self.Entry1_6.configure(disabledforeground="#a3a3a3")
        self.Entry1_6.configure(font="-family {Courier New} -size 13")
        self.Entry1_6.configure(foreground="#000000")
        self.Entry1_6.configure(highlightbackground="#d9d9d9")
        self.Entry1_6.configure(highlightcolor="black")
        self.Entry1_6.configure(insertbackground="black")
        self.Entry1_6.configure(selectbackground="#c4c4c4")
        self.Entry1_6.configure(selectforeground="black")
        self.Entry1_6.configure(textvariable=ping_setting.ping_setting_support.ip_address)

        self.Checkbutton1_7 = tk.Checkbutton(self.Frame5_10)
        checkbox_status.append(self.Checkbutton1_7)
        self.Checkbutton1_7.place(relx=0.8, rely=0.0, relheight=0.886
                , relwidth=0.193)
        self.Checkbutton1_7.configure(activebackground="#ececec")
        self.Checkbutton1_7.configure(activeforeground="#000000")
        self.Checkbutton1_7.configure(background="#d9d9d9")
        self.Checkbutton1_7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_7.configure(font="-family {Segoe UI} -size 13")
        self.Checkbutton1_7.configure(foreground="#000000")
        self.Checkbutton1_7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_7.configure(highlightcolor="black")
        self.Checkbutton1_7.configure(justify='left')
        self.Checkbutton1_7.configure(text='''Active''')
        # self.Checkbutton1_7.configure(variable=ping_setting.ping_setting_support.che59)

        self.Label2_9 = tk.Label(self.Frame5_10)
        ip_serial_number.append(self.Label2_9)
        self.Label2_9.place(relx=0.0, rely=0.0, height=31, width=35)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(font="-family {Segoe UI} -size 13")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''No.''')
        self.Label2_9.configure(textvariable=ping_setting.ping_setting_support.ip_serial)
        self.Label2_9.configure(width=28)

        print(f"ip_entry_list{ip_entry_list} \ntitle_entry_list {title_entry_list} \nip_serial_number: {ip_serial_number}\n checkbox_status{checkbox_status}")
        printCon(f"ip_entry_list{ip_entry_list} \ntitle_entry_list {title_entry_list} \nip_serial_number: {ip_serial_number}\n checkbox_status{checkbox_status}")

        # some adjestment. there was a mistake in Page degine
        for itm in [ip_serial_number,title_entry_list,ip_entry_list,checkbox_status]:
            temp11 = itm.pop(0)
            temp12 = itm.pop()
            itm.insert(0,temp12)
            itm.insert(7,temp11)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        return None

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="{Segoe UI} 9")
        Popupmenu1.configure(foreground="black")
        Popupmenu1.post(event.x_root, event.y_root)

    @staticmethod
    def configure_gui():
        global Ping_title, ip_address, ip_serial_number_StrVar, checkbox_status_IntVar
        Ping_title = []
        ip_address = []
        ip_serial_number_StrVar = []
        checkbox_status_IntVar = []
        global ip_list_32
        ip_list_32 = []

        try:
            global workbook_dataBase, worksheet_ping
            if worksheet_ping.max_column<=3:
                ip_list_32.append()     # just through Exception
            for itm in range(32):
                temp = []
                for i in range(4):
                    value = worksheet_ping.cell(1,itm * 4 + i + 1).value
                    if value == "None" or value == None:
                        value = ""
                    if i<2:
                        temp.append(value)
                    elif i==2:
                        if str(value).isdecimal():
                            temp.append(value)
                        else:
                            temp.append(0)
                    else:
                        if str(value).isdecimal():
                            temp.append(value)
                        else:
                            temp.append(itm * 4 + i + 1)
                ip_list_32.append(temp)
        except Exception as e:
            ip_list_32 = MMCL_monitoring_9_May_2020.extraInfo.get_ip_list()
            print(f"link_status_file.txt not find.. Exception type: {e}")
            printCon(f"link_status_file.txt not find.. Exception type: {e}")
            exc_type, exc_value, exc_traceback = sys.exc_info()
            traceback.print_exception(exc_type, exc_value, exc_traceback)
            exc = traceback.format_exception(exc_type, exc_value, exc_traceback)
            [printCon(i, color='red') for i in exc]

        for i in ip_list_32:
            # print(f"value of i ==== {i},len fist {ip_list_32.__len__()}")
            a = tk.StringVar()
            a.set(i[0])
            b = tk.StringVar()
            b.set(i[1])
            c = tk.IntVar()
            c.set(i[2])
            d = tk.StringVar()
            d.set(str(i[3]))
            Ping_title.append(a)
            ip_address.append(b)
            checkbox_status_IntVar.append(c)
            ip_serial_number_StrVar.append(d)

        printCon(f"Length of ip_serial_number_StrVar:{ip_serial_number_StrVar.__len__()}")
        j=0
        for i in range(8):
            # print(f" value of i = {i} ... {ip_list_32.__len__()}")
            ip_entry_list[j].configure(textvariable=ip_address[i])
            title_entry_list[j].configure(textvariable=Ping_title[i])
            ip_serial_number_StrVar[i].set(f"{i+1}")
            ip_serial_number[j].configure(textvariable=ip_serial_number_StrVar[i])
            checkbox_status[j].configure(variable=checkbox_status_IntVar[i])
            j += 1

        global ip_serial
        ip_serial = tk.StringVar()
        ip_serial.set('No.')

    @classmethod
    def cmd(cls):
        # os.path.expanduser("~/Desktop") # similar code for future document
        # pa = os.environ['USERPROFILE']
        homePath = os.path.normpath(os.path.expanduser("~"))
        cng = f"cd {homePath} && {os.path.splitdrive(homePath)[0]}"

        resize_cmd = "mode con: cols=50 lines=10"
        # not used cause it removes the scrollbar cause here lines=10 means buffer = 10
        global Ping_title, ip_address, ip_serial_number_StrVar, checkbox_status_IntVar
        global current_link_status_list
        current_link_status_list=[]
        for i in range(ip_serial_number_StrVar.__len__()):
            current_link_status_list.append([Ping_title[i].get(),ip_address[i].get(),checkbox_status_IntVar[i].get(),
                          ip_serial_number_StrVar[i].get()])
        print(f"list1 {current_link_status_list}")
        # ip_list is a global variable initiated in setting_var() function
        for ip in current_link_status_list:
            if ip[2]==1:
                commands = ['start', 'cmd.exe', "/k", f'title {ip[0]} &&{cng} && ping {ip[1]} -t']
                proc = subprocess.Popen(commands, shell=True)
        return None

    @staticmethod
    def save_setting():
        global Ping_title, ip_address, ip_serial_number_StrVar, checkbox_status_IntVar
        global current_link_status_list, w
        current_link_status_list =[]
        for i in range(checkbox_status_IntVar.__len__()):
            current_link_status_list.append([Ping_title[i].get(), ip_address[i].get(), checkbox_status_IntVar[i].get(),
                                             ip_serial_number_StrVar[i].get()])
            temp5 = ip_address[i].get()
            # if not (temp5 == "" or temp5 == "None" or temp5 == None):
            if not (temp5 == ""):
                list5=[]
                error = ""
                try:
                    temp5 = temp5.strip()
                    list5 = temp5.split(".")
                    for itm5 in range(4):
                        try: octets = int(list5[itm5])
                        except Exception as e: pass
                        # print(f"{octets} {type(octets)} hello hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh")
                        if not list5[itm5].isdigit():
                            error = f"IP Must not have Alphabet"
                            raise Exception(error)
                        elif list5.__len__() !=4:
                            error = f"IP Must have exact four octets. You given: {list5.__len__()}"
                            raise Exception(error)
                        elif octets > 255 or octets < 0:
                            error = f"Value is more than 256 or less than 0. your value = {octets}"
                            raise Exception(error)
                except Exception as e:
                    exc_type, exc_value, exc_traceback = sys.exc_info()
                    traceback.print_exception(exc_type, exc_value, exc_traceback)
                    exc = traceback.format_exception(exc_type, exc_value, exc_traceback)
                    [printCon(i, color='red') for i in exc]
                    print(f"invalid ip address{ip_address[i].get()} \nException type: {e}. {error}")
                    printCon(f"invalid ip address{ip_address[i].get()} \nException type: {e}. {error}")
                    tk.messagebox.showerror(title="Invalid IP Address",message=f"IP No: {i+1} invalid.\n{ip_address[i].get()}\n{error} \nFile not saved",parent=w)
                    return None
            else:pass

            temp6 = Ping_title[i].get()
            t6 = temp6.find("&")
            if t6 != -1:
                tk.messagebox.showerror(title="Invalid Title",message=f"Title No: {i+1} invalid.\n {Ping_title[i].get()}\n Title must not have '&' \nFile not saved",parent=w)
                return None

        global worksheet_ping, workbook_dataBase
        for item in range(current_link_status_list.__len__()):
            for itm in range(4):
                worksheet_ping.cell(1,item*4+itm+1).value = current_link_status_list[item][itm]
                # worksheet_ping.cell(1,item*4+itm+1).value = 55
        workbook_dataBase.save(f"workbook_dataBase.xlsx")
        printCon(f"{workbook_dataBase.sheetnames} file saved successfully")
        print(current_link_status_list)

    @staticmethod
    def next_page():
        global Ping_title, ip_address, ip_serial_number_StrVar, checkbox_status_IntVar
        global title_entry_list, ip_entry_list, ip_serial_number, checkbox_status
        global ip_list_32, next_previous_page
        if next_previous_page >= 20:
            print(f"No Next page exist")
            printCon(f"No Next page exist")
            return None

        next_previous_page += 8
        j = 0
        for i in range(next_previous_page,next_previous_page+8,1):
            print(f" value of i = {i} ... {ip_list_32.__len__()}")
            print(f"next_previous_page = {next_previous_page}; i = {i}")
            ip_entry_list[j].configure(textvariable=ip_address[i])
            title_entry_list[j].configure(textvariable=Ping_title[i])
            ip_serial_number_StrVar[i].set(f"{i + 1}")
            ip_serial_number[j].configure(textvariable=ip_serial_number_StrVar[i])
            checkbox_status[j].configure(variable=checkbox_status_IntVar[i])
            j += 1

    @staticmethod
    def previous_page():
        global Ping_title, ip_address, ip_serial_number_StrVar, checkbox_status_IntVar
        global title_entry_list,ip_entry_list,ip_serial_number, checkbox_status
        global ip_list_32,next_previous_page
        if next_previous_page <= 6:
            print(f"no previous pages")
            return None

        next_previous_page -= 8
        j = 0
        for i in range(next_previous_page,next_previous_page+8,1):
            print(f" value of i = {i} ... {ip_list_32.__len__()}")
            print(f"next_previous_page = {next_previous_page}; i = {i}")
            ip_entry_list[j].configure(textvariable=ip_address[i])
            title_entry_list[j].configure(textvariable=Ping_title[i])
            ip_serial_number_StrVar[i].set(f"{i + 1}")
            ip_serial_number[j].configure(textvariable=ip_serial_number_StrVar[i])
            checkbox_status[j].configure(variable=checkbox_status_IntVar[i])
            j += 1

    @staticmethod
    def cmdSetting(cls):
        # not have any usability, useless function..
        count = 0
        thread_list = []
        def myFun(ip=""):
            pp = subprocess.Popen(f"ping -n 1 {ip}", stdout=subprocess.PIPE, stdin=subprocess.PIPE, shell=True,
                                  universal_newlines=True, stderr=subprocess.PIPE)
            for i in range(1, 2):
                nonlocal count
                time.sleep(1)
                output, error = pp.communicate()
                pp.wait(30)
                firstIP = output.split("\n")[2]
                print("first IP: ", firstIP)
                printCon(f"first IP: , {firstIP}")
                receive = output[output.find('Received = ') + 'Received = '.__len__()]
                receive = int(receive)
                lost = output[output.find('Lost = ') + 'Lost = '.__len__()]
                lost = int(lost)
                print(f"IP address: {ip}; Received: {receive}; Lost: {lost} ")
                printCon(f"IP address: {ip}; Received: {receive}; Lost: {lost} ")
                if lost==1:
                    count+=1

        # ip_list is a global variable initiated in cmd() function in this class.
        for i in ip_list:
            t1 = threading.Thread(target=myFun, args=(f"{i[1]}",),daemon=True)
            # by using "daemon" keyword, it will kill thread immediately after exit main program
            thread_list.append(t1)
            t1.start()

        t1.join()
        time.sleep(1.5)
        print(count,thread_list)
        printCon(f"{count}:,{thread_list}")
        if count == 0:
            messagebox.showinfo(title="Link Status Summary",message="All links are up..\n(here use only one echo)",parent=top)
        else:
            messagebox.showinfo(title="Link Status Summary",message=f"{count} links are down..\n(here use only one echo)",parent=top)

if __name__ == '__main__':
    vp_start_gui()





